'use client'

import { useEffect, useState } from 'react'
import { useSession, signOut } from 'next-auth/react'
import { useRouter, usePathname } from 'next/navigation'

/**
 * Hook ƒë·ªÉ ki·ªÉm tra authentication tr√™n client-side
 * T·ª± ƒë·ªông logout khi token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá
 */
export const useClientAuthGuard = () => {
  const { data: session, status } = useSession()
  const router = useRouter()
  const pathname = usePathname()
  const [isAuthenticated, setIsAuthenticated] = useState(false)
  const [isLoading, setIsLoading] = useState(true)

  useEffect(() => {
    const checkAuthentication = async () => {
      // N·∫øu ƒëang loading, ch·ªù
      if (status === 'loading') {
        setIsLoading(true)
        return
      }

      // N·∫øu kh√¥ng c√≥ session
      if (!session) {
        setIsAuthenticated(false)
        setIsLoading(false)
        return
      }

      // Ki·ªÉm tra n·∫øu session c√≥ error (token h·∫øt h·∫°n)
      if (session.error === 'TokenExpiredError') {
        console.log('üîí [useClientAuthGuard] Token expired, logging out...')
        await signOut({ redirect: false })
        setIsAuthenticated(false)
        setIsLoading(false)
        return
      }

      // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ access_token
      if (!session.access_token) {
        console.log('üîí [useClientAuthGuard] No access token, logging out...')
        await signOut({ redirect: false })
        setIsAuthenticated(false)
        setIsLoading(false)
        return
      }

      // Ki·ªÉm tra token validity b·∫±ng c√°ch g·ªçi API
      try {
        const response = await fetch('/api/me', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${session.access_token}`
          }
        })

        if (response.status === 401) {
          console.log('üîí [useClientAuthGuard] Token invalid, logging out...')
          await signOut({ redirect: false })
          setIsAuthenticated(false)
          setIsLoading(false)
          return
        }

        if (!response.ok) {
          console.log('üîí [useClientAuthGuard] API error, logging out...')
          await signOut({ redirect: false })
          setIsAuthenticated(false)
          setIsLoading(false)
          return
        }

        // Token h·ª£p l·ªá
        setIsAuthenticated(true)
        setIsLoading(false)
      } catch (error) {
        console.error('üîí [useClientAuthGuard] Error checking token:', error)
        await signOut({ redirect: false })
        setIsAuthenticated(false)
        setIsLoading(false)
      }
    }

    checkAuthentication()
  }, [session, status, router, pathname])

  return {
    isAuthenticated,
    isLoading,
    session
  }
}

