'use client'

import { useSession, signOut } from 'next-auth/react'
import { useEffect, useRef } from 'react'
import { useRouter, usePathname } from 'next/navigation'

/**
 * Hook ƒë·ªÉ cleanup session c≈© khi login m·ªõi
 * Ki·ªÉm tra v√† clear session kh√¥ng h·ª£p l·ªá
 */
export const useSessionCleanup = () => {
  const { data: session, status, update: updateSession } = useSession()
  const router = useRouter()
  const pathname = usePathname()
  const hasCheckedRef = useRef(false)

  useEffect(() => {
    // Ch·ªâ ki·ªÉm tra khi user ƒë√£ authenticated
    if (status === 'authenticated') {
      console.log('üßπ [useSessionCleanup] Checking session validity...')

      const cleanupSession = async () => {
        try {
          // Ki·ªÉm tra n·∫øu session c√≥ error
          if (session?.error === 'RefreshAccessTokenError') {
            console.log('üßπ [useSessionCleanup] Found invalid session with error, cleaning up...')
            await signOut({ redirect: false })
            const lang = pathname.split('/')[1] || 'vi'
            router.push(`/${lang}`)
            return
          }

          // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ access_token
          if (!session?.access_token) {
            console.log('üßπ [useSessionCleanup] Found session without access_token, cleaning up...')
            await signOut({ redirect: false })
            const lang = pathname.split('/')[1] || 'vi'
            router.push(`/${lang}`)
            return
          }

          // Ki·ªÉm tra token validity b·∫±ng c√°ch g·ªçi API (ch·ªâ khi ch∆∞a check)
          if (!hasCheckedRef.current) {
            hasCheckedRef.current = true
            
            const response = await fetch('/api/me', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${session.access_token}`
              }
            })

            if (response.status === 401) {
              console.log('üßπ [useSessionCleanup] Token is invalid, cleaning up...')
              await signOut({ redirect: false })
              const lang = pathname.split('/')[1] || 'vi'
              router.push(`/${lang}`)
              return
            }

            console.log('‚úÖ [useSessionCleanup] Session is valid')
          }
        } catch (error) {
          console.error('‚ùå [useSessionCleanup] Error during cleanup:', error)
          // N·∫øu c√≥ l·ªói, c≈©ng cleanup session ƒë·ªÉ ƒë·∫£m b·∫£o
          await signOut({ redirect: false })
          const lang = pathname.split('/')[1] || 'vi'
          router.push(`/${lang}`)
        }
      }

      cleanupSession()
    }

    // Reset flag khi session thay ƒë·ªïi
    if (status !== 'authenticated') {
      hasCheckedRef.current = false
    }
  }, [session, status, router, pathname])

  return {
    isSessionValid: status === 'authenticated' && session?.access_token && !session?.error
  }
}

export default useSessionCleanup
