'use client'

import { useSession, signOut } from 'next-auth/react'
import { useEffect, useRef } from 'react'
import { useRouter, usePathname } from 'next/navigation'

/**
 * Component global ƒë·ªÉ cleanup session c≈© tr√™n to√†n b·ªô ·ª©ng d·ª•ng
 * Ch·∫°y ngay l·∫≠p t·ª©c khi component mount v√† ki·ªÉm tra ƒë·ªãnh k·ª≥
 */
const GlobalSessionCleanup = () => {
  const { data: session, status } = useSession()
  const router = useRouter()
  const pathname = usePathname()
  const hasCheckedRef = useRef(false)
  const intervalRef = useRef<NodeJS.Timeout | null>(null)

  useEffect(() => {
    // Ch·ªâ ki·ªÉm tra khi c√≥ session
    if (status === 'authenticated' && session) {
      console.log('üßπ [GlobalSessionCleanup] Checking session validity...')

      const cleanupSession = async () => {
        try {
          // Ki·ªÉm tra n·∫øu session c√≥ error
          if (session?.error === 'TokenExpiredError') {
            console.log('üßπ [GlobalSessionCleanup] Found invalid session with error, cleaning up...')
            await signOut({ redirect: false })
            const lang = pathname.split('/')[1] || 'vi'
            router.push(`/${lang}`)
            return
          }

          // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ access_token
          if (!session?.access_token) {
            console.log('üßπ [GlobalSessionCleanup] Found session without access_token, cleaning up...')
            await signOut({ redirect: false })
            const lang = pathname.split('/')[1] || 'vi'
            router.push(`/${lang}`)
            return
          }

          // Ki·ªÉm tra token validity b·∫±ng c√°ch g·ªçi API
          const response = await fetch('/api/me', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${session.access_token}`
            }
          })

          if (response.status === 401) {
            console.log('üßπ [GlobalSessionCleanup] Token is invalid, cleaning up...')
            await signOut({ redirect: false })
            const lang = pathname.split('/')[1] || 'vi'
            router.push(`/${lang}`)
            return
          }

          console.log('‚úÖ [GlobalSessionCleanup] Session is valid')
        } catch (error) {
          console.error('‚ùå [GlobalSessionCleanup] Error during cleanup:', error)
          // N·∫øu c√≥ l·ªói, c≈©ng cleanup session ƒë·ªÉ ƒë·∫£m b·∫£o
          await signOut({ redirect: false })
          const lang = pathname.split('/')[1] || 'vi'
          router.push(`/${lang}`)
        }
      }

      // Ch·∫°y cleanup ngay l·∫≠p t·ª©c
      if (!hasCheckedRef.current) {
        hasCheckedRef.current = true
        cleanupSession()
      }

      // Thi·∫øt l·∫≠p interval ƒë·ªÉ ki·ªÉm tra ƒë·ªãnh k·ª≥ (m·ªói 5 ph√∫t)
      if (!intervalRef.current) {
        intervalRef.current = setInterval(cleanupSession, 5 * 60 * 1000)
      }
    }

    // Cleanup interval khi component unmount
    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current)
        intervalRef.current = null
      }
    }
  }, [session, status, router, pathname])

  // Component n√†y kh√¥ng render g√¨, ch·ªâ ƒë·ªÉ ch·∫°y logic cleanup
  return null
}

export default GlobalSessionCleanup

