// Third-party Imports
import CredentialsProvider from 'next-auth/providers/credentials'

// import type { NextAuthOptions } from 'next-auth'
import type { JWT } from 'next-auth/jwt'

// Bi·∫øn n√†y s·∫Ω l∆∞u tr·ªØ promise c·ªßa l·∫ßn refresh ƒëang di·ªÖn ra.
let refreshTokenPromise: Promise<JWT | null> | null = null

async function refreshToken(token: JWT): Promise<JWT> {
  if (refreshTokenPromise) {
    console.log('üîÑ [Server Debounce] M·ªôt l·∫ßn refresh kh√°c ƒëang ch·∫°y, ƒëang ch·ªù k·∫øt qu·∫£...')

    const result = await refreshTokenPromise
    return result || token
  }

  // N·∫øu kh√¥ng c√≥ promise n√†o, t·∫°o m·ªôt promise m·ªõi v√† g√°n v√†o bi·∫øn to√†n c·ª•c.
  refreshTokenPromise = (async () => {
    console.log('‚ñ∂Ô∏è [Server Refresh] B·∫Øt ƒë·∫ßu qu√° tr√¨nh l√†m m·ªõi token...')

    try {
      const res = await fetch(`${process.env.API_URL}/refresh`, {
        // D√πng API_URL cho server
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token.access_token}`
        }
      })

      const refreshedTokens = await res.json()

      console.log(refreshedTokens)

      if (!res.ok) {
        throw refreshedTokens
      }

      console.log('‚úÖ [Server Refresh] Token refreshed successfully.')

      const newToken = {
        ...token,
        access_token: refreshedTokens.access_token,
        accessTokenExpires: Date.now() + (refreshedTokens.expires_in || 3600) * 1000,
        error: undefined
      }

      console.log('üîÑ [Server Refresh] Token m·ªõi s·∫Ω h·∫øt h·∫°n v√†o:', new Date(newToken.accessTokenExpires))

      return newToken
    } catch (error) {
      console.error('‚ùå [Server Refresh] Th·∫•t b·∫°i khi l√†m m·ªõi token:', error)

      return {
        ...token,
        error: 'RefreshAccessTokenError'
      }
    }
  })()

  try {
    // ƒê·ª£i promise ho√†n th√†nh v√† tr·∫£ v·ªÅ k·∫øt qu·∫£
    const result = await refreshTokenPromise
    return result || token
  } finally {
    // D·ªçn d·∫πp promise sau khi n√≥ ƒë√£ ho√†n th√†nh (d√π th√†nh c√¥ng hay th·∫•t b·∫°i)
    // ƒë·ªÉ c√°c l·∫ßn refresh sau c√≥ th·ªÉ ƒë∆∞·ª£c th·ª±c hi·ªán.
    refreshTokenPromise = null
  }
}

export const authOptions = {
  providers: [
    CredentialsProvider({
      name: 'Credentials',
      credentials: {},
      async authorize(credentials, req) {
        const { email, password } = credentials as { email: string; password: string }
        const apiUrl = process.env.API_URL
        const userAgent = req.headers?.['user-agent'] || ''

        try {
          const res = await fetch(`${apiUrl}/login`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json', 'User-Agent': userAgent },
            body: JSON.stringify({ email, password })
          })

          const data = await res.json()

          // N·∫øu login th·∫•t b·∫°i ho·∫∑c kh√¥ng c√≥ data user -> tr·∫£ v·ªÅ null
          if (!res.ok || !data.user) {
            return null
          }

          // D·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ authorize s·∫Ω ƒë∆∞·ª£c truy·ªÅn v√†o callback `jwt` th√¥ng qua tham s·ªë `user`
          return {
            id: data.user.id || data.user.email,
            access_token: data.access_token,
            accessTokenExpires: Date.now() + (data.expires_in || 3600) * 1000,
            role: data.user.role,
            userData: data.user
          } as any
        } catch (error) {
          return null
        }
      }
    })
  ],

  session: {
    strategy: 'jwt'
  },

  pages: {
    signIn: '/login',
  },

  callbacks: {
    // /**
    //  * Callback ƒë·ªÉ x·ª≠ l√Ω redirect sau khi login
    //  */
    // async redirect({ url, baseUrl }: { url: string; baseUrl: string }) {
    //   // N·∫øu URL l√† relative, th√™m baseUrl
    //   if (url.startsWith('/')) {
    //     return `${baseUrl}${url}`
    //   }
    //   // N·∫øu URL l√† absolute v√† c√πng domain, cho ph√©p
    //   if (url.startsWith(baseUrl)) {
    //     return url
    //   }
    //   // M·∫∑c ƒë·ªãnh redirect v·ªÅ overview
    //   return `${baseUrl}/overview`
    // },

    /**
     * Callback n√†y ƒë∆∞·ª£c g·ªçi m·ªói khi JWT ƒë∆∞·ª£c t·∫°o ho·∫∑c c·∫≠p nh·∫≠t.
     * D·ªØ li·ªáu trong `token` s·∫Ω ƒë∆∞·ª£c truy·ªÅn ƒë·∫øn callback `session`.
     */
    async jwt({ token, user, account, trigger, session }: any) {
      // 1. Khi user ƒëƒÉng nh·∫≠p l·∫ßn ƒë·∫ßu
      if (user && account) {

        return {
          ...token,
          access_token: (user as any).access_token,
          accessTokenExpires: (user as any).accessTokenExpires,
          role: (user as any).role,
          userData: (user as any).userData
        }
      }

      // 2. Khi client g·ªçi `updateSession` ƒë·ªÉ ƒë·ªìng b·ªô token m·ªõi
      if (trigger === 'update' && session?.access_token) {

        return {
          ...token,
          access_token: session.access_token,
          accessTokenExpires: session.accessTokenExpires,
          error: undefined // X√≥a l·ªói khi client cung c·∫•p token m·ªõi
        }
      }

      // 3. Khi c√°c request sau ƒë√≥ di·ªÖn ra, ki·ªÉm tra xem token c√≥ c√≤n h·∫°n kh√¥ng
      if (token.accessTokenExpires && Date.now() < token.accessTokenExpires) {
        return token // Token c√≤n h·∫°n
      }

      // 4. N·∫øu token ƒë√£ h·∫øt h·∫°n, tr·∫£ v·ªÅ token v·ªõi error thay v√¨ null
      return {
        ...token,
        error: 'TokenExpiredError'
      }
    },

    /**
     * Callback n√†y ƒë∆∞·ª£c g·ªçi m·ªói khi session ƒë∆∞·ª£c truy c·∫≠p t·ª´ client.
     * N√≥ nh·∫≠n d·ªØ li·ªáu t·ª´ callback `jwt` ƒë·ªÉ x√¢y d·ª±ng object session cho client.
     */
    async session({ session, token }: any) {
      // N·∫øu token null (ƒë√£ h·∫øt h·∫°n), tr·∫£ v·ªÅ null ƒë·ªÉ x√≥a session
      if (!token) {
        return null
      }

      // G·ª≠i c√°c th√¥ng tin c·∫ßn thi·∫øt v·ªÅ cho client
      (session as any).user = token.userData || (session as any).user;
      (session as any).access_token = token.access_token;
      (session as any).role = (token as any).role;
      (session as any).error = token.error;

      return session
    }
  }
}
