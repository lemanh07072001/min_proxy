// Third-party Imports
import CredentialProvider from 'next-auth/providers/credentials'
import GoogleProvider from 'next-auth/providers/google'

// import type { NextAuthOptions } from 'next-auth'
import type { JWT } from 'next-auth/jwt'

// Bi·∫øn n√†y s·∫Ω l∆∞u tr·ªØ promise c·ªßa l·∫ßn refresh ƒëang di·ªÖn ra.
let refreshTokenPromise: Promise<JWT | null> | null = null

async function refreshToken(token: JWT): Promise<JWT> {
  if (refreshTokenPromise) {
    console.log('üîÑ [Server Debounce] M·ªôt l·∫ßn refresh kh√°c ƒëang ch·∫°y, ƒëang ch·ªù k·∫øt qu·∫£...')

    return await refreshTokenPromise
  }

  // N·∫øu kh√¥ng c√≥ promise n√†o, t·∫°o m·ªôt promise m·ªõi v√† g√°n v√†o bi·∫øn to√†n c·ª•c.
  refreshTokenPromise = (async () => {
    console.log('‚ñ∂Ô∏è [Server Refresh] B·∫Øt ƒë·∫ßu qu√° tr√¨nh l√†m m·ªõi token...')

    try {
      const res = await fetch(`${process.env.API_URL}/refresh`, {
        // D√πng API_URL cho server
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token.access_token}`
        }
      })

      const refreshedTokens = await res.json()

      console.log(refreshedTokens)

      if (!res.ok) {
        throw refreshedTokens
      }

      console.log('‚úÖ [Server Refresh] Token refreshed successfully.')

      const newToken = {
        ...token,
        access_token: refreshedTokens.access_token,
        accessTokenExpires: Date.now() + (refreshedTokens.expires_in || 3600) * 1000,
        error: undefined
      }

      console.log('üîÑ [Server Refresh] Token m·ªõi s·∫Ω h·∫øt h·∫°n v√†o:', new Date(newToken.accessTokenExpires))

      return newToken
    } catch (error) {
      console.error('‚ùå [Server Refresh] Th·∫•t b·∫°i khi l√†m m·ªõi token:', error)

      return {
        ...token,
        error: 'RefreshAccessTokenError'
      }
    }
  })()

  try {
    // ƒê·ª£i promise ho√†n th√†nh v√† tr·∫£ v·ªÅ k·∫øt qu·∫£
    return await refreshTokenPromise
  } finally {
    // D·ªçn d·∫πp promise sau khi n√≥ ƒë√£ ho√†n th√†nh (d√π th√†nh c√¥ng hay th·∫•t b·∫°i)
    // ƒë·ªÉ c√°c l·∫ßn refresh sau c√≥ th·ªÉ ƒë∆∞·ª£c th·ª±c hi·ªán.
    refreshTokenPromise = null
  }
}

export const authOptions = {
  providers: [
    CredentialProvider({
      name: 'Credentials',
      credentials: {},
      async authorize(credentials, req) {
        const { email, password } = credentials as { email: string; password: string }
        const apiUrl = process.env.API_URL
        const userAgent = req.headers?.['user-agent'] || ''

        try {
          const res = await fetch(`${apiUrl}/login`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json', 'User-Agent': userAgent },
            body: JSON.stringify({ email, password })
          })

          const data = await res.json()

          if (res.status !== 200 || !data.user) return null

          return {
            id: data.user.id || data.user.email,
            email: data.user.email,
            role: data.user.role,
            name: data.user.name,
            access_token: data.access_token,
            accessTokenExpires: Date.now() + (data.expires_in || 3600) * 1000,
            userData: data.user
          }
        } catch (err) {
          return null
        }
      }
    })
  ],

  session: { strategy: 'jwt' },
  pages: { signIn: '/login' },

  callbacks: {
    async jwt({ token, user, account, trigger, session }: any) {
      // Khi user login l·∫ßn ƒë·∫ßu
      if (user && account) {
        return {
          ...token,
          access_token: user.access_token,
          accessTokenExpires: user.accessTokenExpires,
          userData: user.userData,
          name: user.userData?.name,
          email: user.userData?.email,
          sub: user.userData?.id,
          role: user.userData?.role
        }
      }

      // Khi client g·ªçi updateSession
      if (trigger === 'update' && session) {
        console.log('üîÑ [JWT Callback] Updating token from client...')

        return {
          ...token,
          access_token: session.access_token,
          accessTokenExpires: session.accessTokenExpires,
          error: undefined
        }
      }

      // // Ki·ªÉm tra token c√≤n h·∫°n kh√¥ng (refresh tr∆∞·ªõc 5 ph√∫t)
      if (token.accessTokenExpires && Date.now() < token.accessTokenExpires - 60 * 1000) {
        return token // Token c√≤n h·∫°n l√¢u
      }

      return refreshToken(token)
    },

    async session({ session, token }: any) {
      session.user = token.userData || session.user
      session.access_token = token.access_token as string
      session.error = token.error as string
      session.role = token.role

      return session
    }
  },

  events: {
    async signOut() {
      // User signed out
    }
  }
}
